class Data:
    def __init__(self):
        """
        Final Round (70s duration):
        - Red (Start)
        - Green (10s)
        - Blue (20s)
        - Yellow (30s)
        - Purple (40s)
        - Gray (50s)
        - Black (60s)
        """
        
        self.levelTimers = [15, 20, 20, 20, 20, 25, 20, 15, 20, 30, 20, 25, 30, 20, 30, 20, 25, 20, 35, 100]
        self.levelBalls = [ # Starting X, Starting Y, Colour, Size, Max Acceleration, Max Velocity
            [
                [500, 200, (255, 0, 0), 10, 0.1, 5]
            ],
            [
                [200, 500, (255, 0, 0), 10, 0.1, 5],
                [800, 500, (255, 0, 0), 10, 0.1, 5]
            ],
            [
                [500, 250, (0, 255, 0), 7, 0.3, 6]
            ],
            [
                [200, 500, (255, 0, 0), 10, 0.1, 5],
                [800, 500, (255, 0, 0), 10, 0.1, 5],
                [500, 250, (0, 255, 0), 7, 0.3, 6]
            ],
            [
                [500, 200, (0, 0, 255), 12, 0.15, 20]
            ],
            [
                [200, 700, (0, 0, 255), 12, 0.15, 20],
                [800, 700, (0, 255, 0), 7, 0.3, 6],
                [500, 200, (255, 0, 0), 10, 0.1, 5]
            ],
            [
                [100, 100, (0, 0, 255), 12, 0.15, 20],
                [900, 900, (0, 0, 255), 12, 0.15, 20],
                [900, 100, (0, 0, 255), 12, 0.15, 20],
                [100, 900, (0, 0, 255), 12, 0.15, 20]
            ],
            [
                [500, 100, (255, 255, 0), 6, 0.4, 2]
            ],
            [
                [500, 100, (255, 255, 0), 6, 0.4, 2],
                [500, 900, (0, 0, 255), 12, 0.15, 20]
            ],
            [
                [200, 200, (255, 255, 0), 6, 0.4, 2],
                [800, 800, (0, 0, 255), 12, 0.15, 20],
                [200, 800, (255, 0, 0), 10, 0.1, 5],
                [800, 200, (0, 255, 0), 7, 0.3, 6]
            ],
            [
                [500, 200, (255, 0, 255), 15, 0.35, 7]
            ],
            [
                [200, 500, (255, 0, 255), 15, 0.35, 7],
                [900, 900, (0, 0, 255), 12, 0.15, 20],
                [900, 100, (0, 0, 255), 12, 0.15, 20]
            ],
            [
                [100, 500, (255, 0, 255), 15, 0.35, 7],
                [900, 500, (255, 255, 0), 6, 0.4, 2],
                [500, 100, (255, 0, 0), 10, 0.1, 5],
                [500, 900, (0, 255, 0), 7, 0.3, 6]
            ],
            [
                [500, 100, (230, 230, 230), 7, 0.35, 1.5],
                [500, 100, (255, 0, 0), 10, 0.1, 5]
            ],
            [
                [500, 100, (230, 230, 230), 7, 0.35, 1.5],
                [200, 200, (255, 255, 0), 6, 0.4, 2],
                [800, 800, (0, 0, 255), 12, 0.15, 20],
                [200, 800, (255, 0, 0), 10, 0.1, 5],
                [800, 200, (0, 255, 0), 7, 0.3, 6],
                [500, 900, (255, 0, 255), 15, 0.35, 7]
            ],
            [
                [500, 200, (255, 0, 255), 15, 0.35, 7],
                [500, 800, (255, 0, 255), 15, 0.35, 7],
                [200, 500, (230, 230, 230), 7, 0.35, 1.5],
                [800, 500, (230, 230, 230), 7, 0.35, 1.5],
                [900, 900, (0, 255, 0), 7, 0.3, 6],
                [900, 100, (0, 255, 0), 7, 0.3, 6],
                [100, 900, (0, 255, 0), 7, 0.3, 6],
                [100, 100, (0, 255, 0), 7, 0.3, 6]
            ],
            [
                [100, 100, (0, 0, 255), 12, 0.15, 20],
                [900, 900, (0, 0, 255), 12, 0.15, 20],
                [900, 100, (0, 0, 255), 12, 0.15, 20],
                [100, 900, (0, 0, 255), 12, 0.15, 20],
                [50, 50, (0, 0, 255), 12, 0.15, 20],
                [950, 950, (0, 0, 255), 12, 0.15, 20],
                [950, 50, (0, 0, 255), 12, 0.15, 20],
                [50, 950, (0, 0, 255), 12, 0.15, 20]
            ],
            [
                [500, 100, (0, 0, 0), 35, 0.1, 25]
            ],
            [
                [500, 100, (0, 0, 0), 35, 0.1, 25],
                [900, 900, (230, 230, 230), 7, 0.35, 1.5],
                [100, 900, (255, 0, 255), 15, 0.35, 7]
            ],
            [
                [500, 200, (255, 0, 0), 10, 0.1, 5]
            ]
        ]

class Ball:
    def __init__(self, x, y, colour, size, maxAcceleration, maxSpeed):
        self.position = [x, y]
        self.maxAcceleration = maxAcceleration
        self.maxSpeed = maxSpeed
        self.colour = colour
        self.size = size

        self.velocity = [0, 0]
    
    def updatePosition(self, mousePos):
        for i in range(0, 2):
            # Acceleration
            difference = mousePos[i] - self.position[i]
            difference = float(max(min(float(difference / 2), self.maxAcceleration), (-1 * self.maxAcceleration)))

            # Velocity
            self.velocity[i] += difference
            if self.velocity[i] > self.maxSpeed:
                self.velocity[i] = self.maxSpeed
            elif self.velocity[i] < self.maxSpeed * -1:
                self.velocity[i] = self.maxSpeed * -1
            
            # Displacement
            self.position[i] += self.velocity[i]
    
